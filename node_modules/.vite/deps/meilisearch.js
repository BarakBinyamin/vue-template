import {
  __commonJS,
  __toESM
} from "./chunk-5CYG367S.js";

// node_modules/cross-fetch/dist/browser-polyfill.js
var require_browser_polyfill = __commonJS({
  "node_modules/cross-fetch/dist/browser-polyfill.js"(exports) {
    (function(self2) {
      var irrelevant = function(exports2) {
        var support = {
          searchParams: "URLSearchParams" in self2,
          iterable: "Symbol" in self2 && "iterator" in Symbol,
          blob: "FileReader" in self2 && "Blob" in self2 && function() {
            try {
              new Blob();
              return true;
            } catch (e) {
              return false;
            }
          }(),
          formData: "FormData" in self2,
          arrayBuffer: "ArrayBuffer" in self2
        };
        function isDataView(obj) {
          return obj && DataView.prototype.isPrototypeOf(obj);
        }
        if (support.arrayBuffer) {
          var viewClasses = [
            "[object Int8Array]",
            "[object Uint8Array]",
            "[object Uint8ClampedArray]",
            "[object Int16Array]",
            "[object Uint16Array]",
            "[object Int32Array]",
            "[object Uint32Array]",
            "[object Float32Array]",
            "[object Float64Array]"
          ];
          var isArrayBufferView = ArrayBuffer.isView || function(obj) {
            return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
          };
        }
        function normalizeName(name) {
          if (typeof name !== "string") {
            name = String(name);
          }
          if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
            throw new TypeError("Invalid character in header field name");
          }
          return name.toLowerCase();
        }
        function normalizeValue(value) {
          if (typeof value !== "string") {
            value = String(value);
          }
          return value;
        }
        function iteratorFor(items) {
          var iterator = {
            next: function() {
              var value = items.shift();
              return { done: value === void 0, value };
            }
          };
          if (support.iterable) {
            iterator[Symbol.iterator] = function() {
              return iterator;
            };
          }
          return iterator;
        }
        function Headers(headers) {
          this.map = {};
          if (headers instanceof Headers) {
            headers.forEach(function(value, name) {
              this.append(name, value);
            }, this);
          } else if (Array.isArray(headers)) {
            headers.forEach(function(header) {
              this.append(header[0], header[1]);
            }, this);
          } else if (headers) {
            Object.getOwnPropertyNames(headers).forEach(function(name) {
              this.append(name, headers[name]);
            }, this);
          }
        }
        Headers.prototype.append = function(name, value) {
          name = normalizeName(name);
          value = normalizeValue(value);
          var oldValue = this.map[name];
          this.map[name] = oldValue ? oldValue + ", " + value : value;
        };
        Headers.prototype["delete"] = function(name) {
          delete this.map[normalizeName(name)];
        };
        Headers.prototype.get = function(name) {
          name = normalizeName(name);
          return this.has(name) ? this.map[name] : null;
        };
        Headers.prototype.has = function(name) {
          return this.map.hasOwnProperty(normalizeName(name));
        };
        Headers.prototype.set = function(name, value) {
          this.map[normalizeName(name)] = normalizeValue(value);
        };
        Headers.prototype.forEach = function(callback, thisArg) {
          for (var name in this.map) {
            if (this.map.hasOwnProperty(name)) {
              callback.call(thisArg, this.map[name], name, this);
            }
          }
        };
        Headers.prototype.keys = function() {
          var items = [];
          this.forEach(function(value, name) {
            items.push(name);
          });
          return iteratorFor(items);
        };
        Headers.prototype.values = function() {
          var items = [];
          this.forEach(function(value) {
            items.push(value);
          });
          return iteratorFor(items);
        };
        Headers.prototype.entries = function() {
          var items = [];
          this.forEach(function(value, name) {
            items.push([name, value]);
          });
          return iteratorFor(items);
        };
        if (support.iterable) {
          Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
        }
        function consumed(body) {
          if (body.bodyUsed) {
            return Promise.reject(new TypeError("Already read"));
          }
          body.bodyUsed = true;
        }
        function fileReaderReady(reader) {
          return new Promise(function(resolve, reject) {
            reader.onload = function() {
              resolve(reader.result);
            };
            reader.onerror = function() {
              reject(reader.error);
            };
          });
        }
        function readBlobAsArrayBuffer(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsArrayBuffer(blob);
          return promise;
        }
        function readBlobAsText(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsText(blob);
          return promise;
        }
        function readArrayBufferAsText(buf) {
          var view = new Uint8Array(buf);
          var chars = new Array(view.length);
          for (var i = 0; i < view.length; i++) {
            chars[i] = String.fromCharCode(view[i]);
          }
          return chars.join("");
        }
        function bufferClone(buf) {
          if (buf.slice) {
            return buf.slice(0);
          } else {
            var view = new Uint8Array(buf.byteLength);
            view.set(new Uint8Array(buf));
            return view.buffer;
          }
        }
        function Body() {
          this.bodyUsed = false;
          this._initBody = function(body) {
            this._bodyInit = body;
            if (!body) {
              this._bodyText = "";
            } else if (typeof body === "string") {
              this._bodyText = body;
            } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
              this._bodyBlob = body;
            } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
              this._bodyFormData = body;
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this._bodyText = body.toString();
            } else if (support.arrayBuffer && support.blob && isDataView(body)) {
              this._bodyArrayBuffer = bufferClone(body.buffer);
              this._bodyInit = new Blob([this._bodyArrayBuffer]);
            } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
              this._bodyArrayBuffer = bufferClone(body);
            } else {
              this._bodyText = body = Object.prototype.toString.call(body);
            }
            if (!this.headers.get("content-type")) {
              if (typeof body === "string") {
                this.headers.set("content-type", "text/plain;charset=UTF-8");
              } else if (this._bodyBlob && this._bodyBlob.type) {
                this.headers.set("content-type", this._bodyBlob.type);
              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
              }
            }
          };
          if (support.blob) {
            this.blob = function() {
              var rejected = consumed(this);
              if (rejected) {
                return rejected;
              }
              if (this._bodyBlob) {
                return Promise.resolve(this._bodyBlob);
              } else if (this._bodyArrayBuffer) {
                return Promise.resolve(new Blob([this._bodyArrayBuffer]));
              } else if (this._bodyFormData) {
                throw new Error("could not read FormData body as blob");
              } else {
                return Promise.resolve(new Blob([this._bodyText]));
              }
            };
            this.arrayBuffer = function() {
              if (this._bodyArrayBuffer) {
                return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
              } else {
                return this.blob().then(readBlobAsArrayBuffer);
              }
            };
          }
          this.text = function() {
            var rejected = consumed(this);
            if (rejected) {
              return rejected;
            }
            if (this._bodyBlob) {
              return readBlobAsText(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
            } else if (this._bodyFormData) {
              throw new Error("could not read FormData body as text");
            } else {
              return Promise.resolve(this._bodyText);
            }
          };
          if (support.formData) {
            this.formData = function() {
              return this.text().then(decode);
            };
          }
          this.json = function() {
            return this.text().then(JSON.parse);
          };
          return this;
        }
        var methods = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];
        function normalizeMethod(method) {
          var upcased = method.toUpperCase();
          return methods.indexOf(upcased) > -1 ? upcased : method;
        }
        function Request(input, options) {
          options = options || {};
          var body = options.body;
          if (input instanceof Request) {
            if (input.bodyUsed) {
              throw new TypeError("Already read");
            }
            this.url = input.url;
            this.credentials = input.credentials;
            if (!options.headers) {
              this.headers = new Headers(input.headers);
            }
            this.method = input.method;
            this.mode = input.mode;
            this.signal = input.signal;
            if (!body && input._bodyInit != null) {
              body = input._bodyInit;
              input.bodyUsed = true;
            }
          } else {
            this.url = String(input);
          }
          this.credentials = options.credentials || this.credentials || "same-origin";
          if (options.headers || !this.headers) {
            this.headers = new Headers(options.headers);
          }
          this.method = normalizeMethod(options.method || this.method || "GET");
          this.mode = options.mode || this.mode || null;
          this.signal = options.signal || this.signal;
          this.referrer = null;
          if ((this.method === "GET" || this.method === "HEAD") && body) {
            throw new TypeError("Body not allowed for GET or HEAD requests");
          }
          this._initBody(body);
        }
        Request.prototype.clone = function() {
          return new Request(this, { body: this._bodyInit });
        };
        function decode(body) {
          var form = new FormData();
          body.trim().split("&").forEach(function(bytes) {
            if (bytes) {
              var split = bytes.split("=");
              var name = split.shift().replace(/\+/g, " ");
              var value = split.join("=").replace(/\+/g, " ");
              form.append(decodeURIComponent(name), decodeURIComponent(value));
            }
          });
          return form;
        }
        function parseHeaders(rawHeaders) {
          var headers = new Headers();
          var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
          preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
            var parts = line.split(":");
            var key = parts.shift().trim();
            if (key) {
              var value = parts.join(":").trim();
              headers.append(key, value);
            }
          });
          return headers;
        }
        Body.call(Request.prototype);
        function Response2(bodyInit, options) {
          if (!options) {
            options = {};
          }
          this.type = "default";
          this.status = options.status === void 0 ? 200 : options.status;
          this.ok = this.status >= 200 && this.status < 300;
          this.statusText = "statusText" in options ? options.statusText : "OK";
          this.headers = new Headers(options.headers);
          this.url = options.url || "";
          this._initBody(bodyInit);
        }
        Body.call(Response2.prototype);
        Response2.prototype.clone = function() {
          return new Response2(this._bodyInit, {
            status: this.status,
            statusText: this.statusText,
            headers: new Headers(this.headers),
            url: this.url
          });
        };
        Response2.error = function() {
          var response = new Response2(null, { status: 0, statusText: "" });
          response.type = "error";
          return response;
        };
        var redirectStatuses = [301, 302, 303, 307, 308];
        Response2.redirect = function(url, status) {
          if (redirectStatuses.indexOf(status) === -1) {
            throw new RangeError("Invalid status code");
          }
          return new Response2(null, { status, headers: { location: url } });
        };
        exports2.DOMException = self2.DOMException;
        try {
          new exports2.DOMException();
        } catch (err) {
          exports2.DOMException = function(message, name) {
            this.message = message;
            this.name = name;
            var error = Error(message);
            this.stack = error.stack;
          };
          exports2.DOMException.prototype = Object.create(Error.prototype);
          exports2.DOMException.prototype.constructor = exports2.DOMException;
        }
        function fetch2(input, init) {
          return new Promise(function(resolve, reject) {
            var request = new Request(input, init);
            if (request.signal && request.signal.aborted) {
              return reject(new exports2.DOMException("Aborted", "AbortError"));
            }
            var xhr = new XMLHttpRequest();
            function abortXhr() {
              xhr.abort();
            }
            xhr.onload = function() {
              var options = {
                status: xhr.status,
                statusText: xhr.statusText,
                headers: parseHeaders(xhr.getAllResponseHeaders() || "")
              };
              options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
              var body = "response" in xhr ? xhr.response : xhr.responseText;
              resolve(new Response2(body, options));
            };
            xhr.onerror = function() {
              reject(new TypeError("Network request failed"));
            };
            xhr.ontimeout = function() {
              reject(new TypeError("Network request failed"));
            };
            xhr.onabort = function() {
              reject(new exports2.DOMException("Aborted", "AbortError"));
            };
            xhr.open(request.method, request.url, true);
            if (request.credentials === "include") {
              xhr.withCredentials = true;
            } else if (request.credentials === "omit") {
              xhr.withCredentials = false;
            }
            if ("responseType" in xhr && support.blob) {
              xhr.responseType = "blob";
            }
            request.headers.forEach(function(value, name) {
              xhr.setRequestHeader(name, value);
            });
            if (request.signal) {
              request.signal.addEventListener("abort", abortXhr);
              xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                  request.signal.removeEventListener("abort", abortXhr);
                }
              };
            }
            xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
          });
        }
        fetch2.polyfill = true;
        if (!self2.fetch) {
          self2.fetch = fetch2;
          self2.Headers = Headers;
          self2.Request = Request;
          self2.Response = Response2;
        }
        exports2.Headers = Headers;
        exports2.Request = Request;
        exports2.Response = Response2;
        exports2.fetch = fetch2;
        Object.defineProperty(exports2, "__esModule", { value: true });
        return exports2;
      }({});
    })(typeof self !== "undefined" ? self : exports);
  }
});

// node_modules/meilisearch/dist/bundles/meilisearch.esm.js
var import_polyfill = __toESM(require_browser_polyfill());

// browser-external:crypto
var crypto_default = new Proxy({}, {
  get() {
    throw new Error('Module "crypto" has been externalized for browser compatibility and cannot be accessed in client code.');
  }
});

// node_modules/meilisearch/dist/bundles/meilisearch.esm.js
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p))
        d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
  __assign = Object.assign || function __assign2(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
var MeiliSearchCommunicationError = function(_super) {
  __extends(MeiliSearchCommunicationError2, _super);
  function MeiliSearchCommunicationError2(message, body, url, stack) {
    var _this = this;
    var _a, _b, _c;
    _this = _super.call(this, message) || this;
    Object.setPrototypeOf(_this, MeiliSearchCommunicationError2.prototype);
    _this.name = "MeiliSearchCommunicationError";
    if (body instanceof Response) {
      _this.message = body.statusText;
      _this.statusCode = body.status;
    }
    if (body instanceof Error) {
      _this.errno = body.errno;
      _this.code = body.code;
    }
    if (stack) {
      _this.stack = stack;
      _this.stack = (_a = _this.stack) === null || _a === void 0 ? void 0 : _a.replace(/(TypeError|FetchError)/, _this.name);
      _this.stack = (_b = _this.stack) === null || _b === void 0 ? void 0 : _b.replace("Failed to fetch", "request to ".concat(url, " failed, reason: connect ECONNREFUSED"));
      _this.stack = (_c = _this.stack) === null || _c === void 0 ? void 0 : _c.replace("Not Found", "Not Found: ".concat(url));
    } else {
      if (Error.captureStackTrace) {
        Error.captureStackTrace(_this, MeiliSearchCommunicationError2);
      }
    }
    return _this;
  }
  return MeiliSearchCommunicationError2;
}(Error);
var MeiliSearchApiError = function(_super) {
  __extends(class_1, _super);
  function class_1(error, status) {
    var _this = _super.call(this, error.message) || this;
    Object.setPrototypeOf(_this, MeiliSearchApiError.prototype);
    _this.name = "MeiliSearchApiError";
    _this.code = error.code;
    _this.type = error.type;
    _this.link = error.link;
    _this.message = error.message;
    _this.httpStatus = status;
    if (Error.captureStackTrace) {
      Error.captureStackTrace(_this, MeiliSearchApiError);
    }
    return _this;
  }
  return class_1;
}(Error);
function httpResponseErrorHandler(response) {
  return __awaiter(this, void 0, void 0, function() {
    var responseBody;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (!!response.ok)
            return [3, 5];
          responseBody = void 0;
          _a.label = 1;
        case 1:
          _a.trys.push([1, 3, , 4]);
          return [4, response.json()];
        case 2:
          responseBody = _a.sent();
          return [3, 4];
        case 3:
          _a.sent();
          throw new MeiliSearchCommunicationError(response.statusText, response, response.url);
        case 4:
          throw new MeiliSearchApiError(responseBody, response.status);
        case 5:
          return [2, response];
      }
    });
  });
}
function httpErrorHandler(response, stack, url) {
  if (response.name !== "MeiliSearchApiError") {
    throw new MeiliSearchCommunicationError(response.message, response, url, stack);
  }
  throw response;
}
var MeiliSearchError = function(_super) {
  __extends(MeiliSearchError2, _super);
  function MeiliSearchError2(message) {
    var _this = _super.call(this, message) || this;
    Object.setPrototypeOf(_this, MeiliSearchError2.prototype);
    _this.name = "MeiliSearchError";
    if (Error.captureStackTrace) {
      Error.captureStackTrace(_this, MeiliSearchError2);
    }
    return _this;
  }
  return MeiliSearchError2;
}(Error);
var MeiliSearchTimeOutError = function(_super) {
  __extends(MeiliSearchTimeOutError2, _super);
  function MeiliSearchTimeOutError2(message) {
    var _this = _super.call(this, message) || this;
    Object.setPrototypeOf(_this, MeiliSearchTimeOutError2.prototype);
    _this.name = "MeiliSearchTimeOutError";
    if (Error.captureStackTrace) {
      Error.captureStackTrace(_this, MeiliSearchTimeOutError2);
    }
    return _this;
  }
  return MeiliSearchTimeOutError2;
}(Error);
function removeUndefinedFromObject(obj) {
  return Object.entries(obj).reduce(function(acc, curEntry) {
    var key = curEntry[0], val = curEntry[1];
    if (val !== void 0)
      acc[key] = val;
    return acc;
  }, {});
}
function sleep(ms) {
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          return [4, new Promise(function(resolve) {
            return setTimeout(resolve, ms);
          })];
        case 1:
          return [2, _a.sent()];
      }
    });
  });
}
function addProtocolIfNotPresent(host) {
  if (!(host.startsWith("https://") || host.startsWith("http://"))) {
    return "http://".concat(host);
  }
  return host;
}
function addTrailingSlash(url) {
  if (!url.endsWith("/")) {
    url += "/";
  }
  return url;
}
function constructHostURL(host) {
  try {
    host = addProtocolIfNotPresent(host);
    host = addTrailingSlash(host);
    return host;
  } catch (e) {
    throw new MeiliSearchError("The provided host is not valid.");
  }
}
var HttpRequests = function() {
  function HttpRequests2(config) {
    this.headers = Object.assign({}, config.headers || {});
    this.headers["Content-Type"] = "application/json";
    if (config.apiKey) {
      this.headers["Authorization"] = "Bearer ".concat(config.apiKey);
    }
    try {
      var host = constructHostURL(config.host);
      this.url = new URL(host);
    } catch (e) {
      throw new MeiliSearchError("The provided host is not valid.");
    }
  }
  HttpRequests2.prototype.request = function(_a) {
    var method = _a.method, url = _a.url, params = _a.params, body = _a.body, config = _a.config;
    return __awaiter(this, void 0, void 0, function() {
      var constructURL, queryParams_1, response, parsedBody, e_1, stack;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            constructURL = new URL(url, this.url);
            if (params) {
              queryParams_1 = new URLSearchParams();
              Object.keys(params).filter(function(x) {
                return params[x] !== null;
              }).map(function(x) {
                return queryParams_1.set(x, params[x]);
              });
              constructURL.search = queryParams_1.toString();
            }
            _b.label = 1;
          case 1:
            _b.trys.push([1, 4, , 5]);
            return [4, fetch(constructURL.toString(), __assign(__assign({}, config), { method, body: JSON.stringify(body), headers: this.headers })).then(function(res) {
              return httpResponseErrorHandler(res);
            })];
          case 2:
            response = _b.sent();
            return [4, response.json()["catch"](function() {
              return void 0;
            })];
          case 3:
            parsedBody = _b.sent();
            return [2, parsedBody];
          case 4:
            e_1 = _b.sent();
            stack = e_1.stack;
            httpErrorHandler(e_1, stack, constructURL.toString());
            return [3, 5];
          case 5:
            return [2];
        }
      });
    });
  };
  HttpRequests2.prototype.get = function(url, params, config) {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            return [4, this.request({
              method: "GET",
              url,
              params,
              config
            })];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  HttpRequests2.prototype.post = function(url, data, params, config) {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            return [4, this.request({
              method: "POST",
              url,
              body: data,
              params,
              config
            })];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  HttpRequests2.prototype.put = function(url, data, params, config) {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            return [4, this.request({
              method: "PUT",
              url,
              body: data,
              params,
              config
            })];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  HttpRequests2.prototype.patch = function(url, data, params, config) {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            return [4, this.request({
              method: "PATCH",
              url,
              body: data,
              params,
              config
            })];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  HttpRequests2.prototype["delete"] = function(url, data, params, config) {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            return [4, this.request({
              method: "DELETE",
              url,
              body: data,
              params,
              config
            })];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  return HttpRequests2;
}();
var TaskClient = function() {
  function TaskClient2(config) {
    this.httpRequest = new HttpRequests(config);
  }
  TaskClient2.prototype.getClientTask = function(uid) {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "tasks/".concat(uid);
            return [4, this.httpRequest.get(url)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  TaskClient2.prototype.getClientTasks = function() {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "tasks";
            return [4, this.httpRequest.get(url)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  TaskClient2.prototype.getIndexTask = function(indexUid, taskId) {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(indexUid, "/tasks/").concat(taskId);
            return [4, this.httpRequest.get(url)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  TaskClient2.prototype.getIndexTasks = function(indexUid) {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(indexUid, "/tasks");
            return [4, this.httpRequest.get(url)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  TaskClient2.prototype.waitForClientTask = function(taskId, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.timeOutMs, timeOutMs = _c === void 0 ? 5e3 : _c, _d = _b.intervalMs, intervalMs = _d === void 0 ? 50 : _d;
    return __awaiter(this, void 0, void 0, function() {
      var startingTime, response;
      return __generator(this, function(_e) {
        switch (_e.label) {
          case 0:
            startingTime = Date.now();
            _e.label = 1;
          case 1:
            if (!(Date.now() - startingTime < timeOutMs))
              return [3, 4];
            return [4, this.getClientTask(taskId)];
          case 2:
            response = _e.sent();
            if (!["enqueued", "processing"].includes(response.status))
              return [2, response];
            return [4, sleep(intervalMs)];
          case 3:
            _e.sent();
            return [3, 1];
          case 4:
            throw new MeiliSearchTimeOutError("timeout of ".concat(timeOutMs, "ms has exceeded on process ").concat(taskId, " when waiting a task to be resolved."));
        }
      });
    });
  };
  TaskClient2.prototype.waitForClientTasks = function(taskIds, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.timeOutMs, timeOutMs = _c === void 0 ? 5e3 : _c, _d = _b.intervalMs, intervalMs = _d === void 0 ? 50 : _d;
    return __awaiter(this, void 0, void 0, function() {
      var tasks, _i, taskIds_1, taskId, task;
      return __generator(this, function(_e) {
        switch (_e.label) {
          case 0:
            tasks = [];
            _i = 0, taskIds_1 = taskIds;
            _e.label = 1;
          case 1:
            if (!(_i < taskIds_1.length))
              return [3, 4];
            taskId = taskIds_1[_i];
            return [4, this.waitForClientTask(taskId, {
              timeOutMs,
              intervalMs
            })];
          case 2:
            task = _e.sent();
            tasks.push(task);
            _e.label = 3;
          case 3:
            _i++;
            return [3, 1];
          case 4:
            return [2, { results: tasks }];
        }
      });
    });
  };
  TaskClient2.prototype.waitForIndexTask = function(indexUid, taskId, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.timeOutMs, timeOutMs = _c === void 0 ? 5e3 : _c, _d = _b.intervalMs, intervalMs = _d === void 0 ? 50 : _d;
    return __awaiter(this, void 0, void 0, function() {
      var startingTime, response;
      return __generator(this, function(_e) {
        switch (_e.label) {
          case 0:
            startingTime = Date.now();
            _e.label = 1;
          case 1:
            if (!(Date.now() - startingTime < timeOutMs))
              return [3, 4];
            return [4, this.getIndexTask(indexUid, taskId)];
          case 2:
            response = _e.sent();
            if (!["enqueued", "processing"].includes(response.status))
              return [2, response];
            return [4, sleep(intervalMs)];
          case 3:
            _e.sent();
            return [3, 1];
          case 4:
            throw new MeiliSearchTimeOutError("timeout of ".concat(timeOutMs, "ms has exceeded on process ").concat(taskId, " when waiting for pending update to resolve."));
        }
      });
    });
  };
  return TaskClient2;
}();
var Index = function() {
  function Index2(config, uid, primaryKey) {
    this.uid = uid;
    this.primaryKey = primaryKey;
    this.httpRequest = new HttpRequests(config);
    this.tasks = new TaskClient(config);
  }
  Index2.prototype.search = function(query, options, config) {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/search");
            return [4, this.httpRequest.post(url, removeUndefinedFromObject(__assign({ q: query }, options)), void 0, config)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.searchGet = function(query, options, config) {
    var _a, _b, _c, _d, _e;
    return __awaiter(this, void 0, void 0, function() {
      var url, parseFilter, getParams;
      return __generator(this, function(_f) {
        switch (_f.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/search");
            parseFilter = function(filter) {
              if (typeof filter === "string")
                return filter;
              else if (Array.isArray(filter))
                throw new MeiliSearchError("The filter query parameter should be in string format when using searchGet");
              else
                return void 0;
            };
            getParams = __assign(__assign({ q: query }, options), { filter: parseFilter(options === null || options === void 0 ? void 0 : options.filter), sort: (_a = options === null || options === void 0 ? void 0 : options.sort) === null || _a === void 0 ? void 0 : _a.join(","), facetsDistribution: (_b = options === null || options === void 0 ? void 0 : options.facetsDistribution) === null || _b === void 0 ? void 0 : _b.join(","), attributesToRetrieve: (_c = options === null || options === void 0 ? void 0 : options.attributesToRetrieve) === null || _c === void 0 ? void 0 : _c.join(","), attributesToCrop: (_d = options === null || options === void 0 ? void 0 : options.attributesToCrop) === null || _d === void 0 ? void 0 : _d.join(","), attributesToHighlight: (_e = options === null || options === void 0 ? void 0 : options.attributesToHighlight) === null || _e === void 0 ? void 0 : _e.join(",") });
            return [4, this.httpRequest.get(url, removeUndefinedFromObject(getParams), config)];
          case 1:
            return [2, _f.sent()];
        }
      });
    });
  };
  Index2.prototype.getRawInfo = function() {
    return __awaiter(this, void 0, void 0, function() {
      var url, res;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid);
            return [4, this.httpRequest.get(url)];
          case 1:
            res = _a.sent();
            this.primaryKey = res.primaryKey;
            this.updatedAt = new Date(res.updatedAt);
            this.createdAt = new Date(res.createdAt);
            return [2, res];
        }
      });
    });
  };
  Index2.prototype.fetchInfo = function() {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            return [4, this.getRawInfo()];
          case 1:
            _a.sent();
            return [2, this];
        }
      });
    });
  };
  Index2.prototype.fetchPrimaryKey = function() {
    return __awaiter(this, void 0, void 0, function() {
      var _a;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            _a = this;
            return [4, this.getRawInfo()];
          case 1:
            _a.primaryKey = _b.sent().primaryKey;
            return [2, this.primaryKey];
        }
      });
    });
  };
  Index2.create = function(uid, options, config) {
    if (options === void 0) {
      options = {};
    }
    return __awaiter(this, void 0, void 0, function() {
      var url, req;
      return __generator(this, function(_a) {
        url = "indexes";
        req = new HttpRequests(config);
        return [2, req.post(url, __assign(__assign({}, options), { uid }))];
      });
    });
  };
  Index2.prototype.update = function(data) {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid);
            return [4, this.httpRequest.put(url, data)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype["delete"] = function() {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid);
            return [4, this.httpRequest["delete"](url)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.getTasks = function() {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            return [4, this.tasks.getIndexTasks(this.uid)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.getTask = function(taskId) {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            return [4, this.tasks.getIndexTask(this.uid, taskId)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.waitForTasks = function(taskIds, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.timeOutMs, timeOutMs = _c === void 0 ? 5e3 : _c, _d = _b.intervalMs, intervalMs = _d === void 0 ? 50 : _d;
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_e) {
        switch (_e.label) {
          case 0:
            return [4, this.tasks.waitForClientTasks(taskIds, {
              timeOutMs,
              intervalMs
            })];
          case 1:
            return [2, _e.sent()];
        }
      });
    });
  };
  Index2.prototype.waitForTask = function(taskId, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.timeOutMs, timeOutMs = _c === void 0 ? 5e3 : _c, _d = _b.intervalMs, intervalMs = _d === void 0 ? 50 : _d;
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_e) {
        switch (_e.label) {
          case 0:
            return [4, this.tasks.waitForClientTask(taskId, {
              timeOutMs,
              intervalMs
            })];
          case 1:
            return [2, _e.sent()];
        }
      });
    });
  };
  Index2.prototype.getStats = function() {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/stats");
            return [4, this.httpRequest.get(url)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.getDocuments = function(options) {
    return __awaiter(this, void 0, void 0, function() {
      var url, attr;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/documents");
            if (options !== void 0 && Array.isArray(options.attributesToRetrieve)) {
              attr = options.attributesToRetrieve.join(",");
            }
            return [4, this.httpRequest.get(url, __assign(__assign({}, options), attr !== void 0 ? { attributesToRetrieve: attr } : {}))];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.getDocument = function(documentId) {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/documents/").concat(documentId);
            return [4, this.httpRequest.get(url)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.addDocuments = function(documents, options) {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/documents");
            return [4, this.httpRequest.post(url, documents, options)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.addDocumentsInBatches = function(documents, batchSize, options) {
    if (batchSize === void 0) {
      batchSize = 1e3;
    }
    return __awaiter(this, void 0, void 0, function() {
      var updates, i, _a, _b;
      return __generator(this, function(_c) {
        switch (_c.label) {
          case 0:
            updates = [];
            i = 0;
            _c.label = 1;
          case 1:
            if (!(i < documents.length))
              return [3, 4];
            _b = (_a = updates).push;
            return [4, this.addDocuments(documents.slice(i, i + batchSize), options)];
          case 2:
            _b.apply(_a, [_c.sent()]);
            _c.label = 3;
          case 3:
            i += batchSize;
            return [3, 1];
          case 4:
            return [2, updates];
        }
      });
    });
  };
  Index2.prototype.updateDocuments = function(documents, options) {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/documents");
            return [4, this.httpRequest.put(url, documents, options)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.updateDocumentsInBatches = function(documents, batchSize, options) {
    if (batchSize === void 0) {
      batchSize = 1e3;
    }
    return __awaiter(this, void 0, void 0, function() {
      var updates, i, _a, _b;
      return __generator(this, function(_c) {
        switch (_c.label) {
          case 0:
            updates = [];
            i = 0;
            _c.label = 1;
          case 1:
            if (!(i < documents.length))
              return [3, 4];
            _b = (_a = updates).push;
            return [4, this.updateDocuments(documents.slice(i, i + batchSize), options)];
          case 2:
            _b.apply(_a, [_c.sent()]);
            _c.label = 3;
          case 3:
            i += batchSize;
            return [3, 1];
          case 4:
            return [2, updates];
        }
      });
    });
  };
  Index2.prototype.deleteDocument = function(documentId) {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/documents/").concat(documentId);
            return [4, this.httpRequest["delete"](url)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.deleteDocuments = function(documentsIds) {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/documents/delete-batch");
            return [4, this.httpRequest.post(url, documentsIds)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.deleteAllDocuments = function() {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/documents");
            return [4, this.httpRequest["delete"](url)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.getSettings = function() {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/settings");
            return [4, this.httpRequest.get(url)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.updateSettings = function(settings) {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/settings");
            return [4, this.httpRequest.post(url, settings)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.resetSettings = function() {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/settings");
            return [4, this.httpRequest["delete"](url)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.getSynonyms = function() {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/settings/synonyms");
            return [4, this.httpRequest.get(url)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.updateSynonyms = function(synonyms) {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/settings/synonyms");
            return [4, this.httpRequest.post(url, synonyms)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.resetSynonyms = function() {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/settings/synonyms");
            return [4, this.httpRequest["delete"](url)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.getStopWords = function() {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/settings/stop-words");
            return [4, this.httpRequest.get(url)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.updateStopWords = function(stopWords) {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/settings/stop-words");
            return [4, this.httpRequest.post(url, stopWords)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.resetStopWords = function() {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/settings/stop-words");
            return [4, this.httpRequest["delete"](url)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.getRankingRules = function() {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/settings/ranking-rules");
            return [4, this.httpRequest.get(url)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.updateRankingRules = function(rankingRules) {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/settings/ranking-rules");
            return [4, this.httpRequest.post(url, rankingRules)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.resetRankingRules = function() {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/settings/ranking-rules");
            return [4, this.httpRequest["delete"](url)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.getDistinctAttribute = function() {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/settings/distinct-attribute");
            return [4, this.httpRequest.get(url)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.updateDistinctAttribute = function(distinctAttribute) {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/settings/distinct-attribute");
            return [4, this.httpRequest.post(url, distinctAttribute)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.resetDistinctAttribute = function() {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/settings/distinct-attribute");
            return [4, this.httpRequest["delete"](url)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.getFilterableAttributes = function() {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/settings/filterable-attributes");
            return [4, this.httpRequest.get(url)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.updateFilterableAttributes = function(filterableAttributes) {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/settings/filterable-attributes");
            return [4, this.httpRequest.post(url, filterableAttributes)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.resetFilterableAttributes = function() {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/settings/filterable-attributes");
            return [4, this.httpRequest["delete"](url)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.getSortableAttributes = function() {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/settings/sortable-attributes");
            return [4, this.httpRequest.get(url)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.updateSortableAttributes = function(sortableAttributes) {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/settings/sortable-attributes");
            return [4, this.httpRequest.post(url, sortableAttributes)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.resetSortableAttributes = function() {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/settings/sortable-attributes");
            return [4, this.httpRequest["delete"](url)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.getSearchableAttributes = function() {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/settings/searchable-attributes");
            return [4, this.httpRequest.get(url)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.updateSearchableAttributes = function(searchableAttributes) {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/settings/searchable-attributes");
            return [4, this.httpRequest.post(url, searchableAttributes)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.resetSearchableAttributes = function() {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/settings/searchable-attributes");
            return [4, this.httpRequest["delete"](url)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.getDisplayedAttributes = function() {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/settings/displayed-attributes");
            return [4, this.httpRequest.get(url)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.updateDisplayedAttributes = function(displayedAttributes) {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/settings/displayed-attributes");
            return [4, this.httpRequest.post(url, displayedAttributes)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.resetDisplayedAttributes = function() {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/settings/displayed-attributes");
            return [4, this.httpRequest["delete"](url)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.getTypoTolerance = function() {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/settings/typo-tolerance");
            return [4, this.httpRequest.get(url)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.updateTypoTolerance = function(typoTolerance) {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/settings/typo-tolerance");
            return [4, this.httpRequest.post(url, typoTolerance)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Index2.prototype.resetTypoTolerance = function() {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes/".concat(this.uid, "/settings/typo-tolerance");
            return [4, this.httpRequest["delete"](url)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  return Index2;
}();
var Client = function() {
  function Client2(config) {
    this.config = config;
    this.httpRequest = new HttpRequests(config);
    this.tasks = new TaskClient(config);
  }
  Client2.prototype.index = function(indexUid) {
    return new Index(this.config, indexUid);
  };
  Client2.prototype.getIndex = function(indexUid) {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_a) {
        return [2, new Index(this.config, indexUid).fetchInfo()];
      });
    });
  };
  Client2.prototype.getRawIndex = function(indexUid) {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_a) {
        return [2, new Index(this.config, indexUid).getRawInfo()];
      });
    });
  };
  Client2.prototype.getIndexes = function() {
    return __awaiter(this, void 0, void 0, function() {
      var response, indexes;
      var _this = this;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            return [4, this.getRawIndexes()];
          case 1:
            response = _a.sent();
            indexes = response.map(function(index) {
              return new Index(_this.config, index.uid, index.primaryKey);
            });
            return [2, indexes];
        }
      });
    });
  };
  Client2.prototype.getRawIndexes = function() {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "indexes";
            return [4, this.httpRequest.get(url)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Client2.prototype.createIndex = function(uid, options) {
    if (options === void 0) {
      options = {};
    }
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            return [4, Index.create(uid, options, this.config)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Client2.prototype.updateIndex = function(uid, options) {
    if (options === void 0) {
      options = {};
    }
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            return [4, new Index(this.config, uid).update(options)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Client2.prototype.deleteIndex = function(uid) {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            return [4, new Index(this.config, uid)["delete"]()];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Client2.prototype.deleteIndexIfExists = function(uid) {
    return __awaiter(this, void 0, void 0, function() {
      var e_1;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            _a.trys.push([0, 2, , 3]);
            return [4, this.deleteIndex(uid)];
          case 1:
            _a.sent();
            return [2, true];
          case 2:
            e_1 = _a.sent();
            if (e_1.code === "index_not_found") {
              return [2, false];
            }
            throw e_1;
          case 3:
            return [2];
        }
      });
    });
  };
  Client2.prototype.getTasks = function() {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            return [4, this.tasks.getClientTasks()];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Client2.prototype.getTask = function(taskId) {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            return [4, this.tasks.getClientTask(taskId)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Client2.prototype.waitForTasks = function(taskIds, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.timeOutMs, timeOutMs = _c === void 0 ? 5e3 : _c, _d = _b.intervalMs, intervalMs = _d === void 0 ? 50 : _d;
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_e) {
        switch (_e.label) {
          case 0:
            return [4, this.tasks.waitForClientTasks(taskIds, {
              timeOutMs,
              intervalMs
            })];
          case 1:
            return [2, _e.sent()];
        }
      });
    });
  };
  Client2.prototype.waitForTask = function(taskId, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.timeOutMs, timeOutMs = _c === void 0 ? 5e3 : _c, _d = _b.intervalMs, intervalMs = _d === void 0 ? 50 : _d;
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_e) {
        switch (_e.label) {
          case 0:
            return [4, this.tasks.waitForClientTask(taskId, {
              timeOutMs,
              intervalMs
            })];
          case 1:
            return [2, _e.sent()];
        }
      });
    });
  };
  Client2.prototype.getKeys = function() {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "keys";
            return [4, this.httpRequest.get(url)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Client2.prototype.getKey = function(key) {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "keys/".concat(key);
            return [4, this.httpRequest.get(url)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Client2.prototype.createKey = function(options) {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "keys";
            return [4, this.httpRequest.post(url, options)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Client2.prototype.updateKey = function(key, options) {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "keys/".concat(key);
            return [4, this.httpRequest.patch(url, options)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Client2.prototype.deleteKey = function(key) {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "keys/".concat(key);
            return [4, this.httpRequest["delete"](url)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Client2.prototype.health = function() {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "health";
            return [4, this.httpRequest.get(url)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Client2.prototype.isHealthy = function() {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            _a.trys.push([0, 2, , 3]);
            url = "health";
            return [4, this.httpRequest.get(url)];
          case 1:
            _a.sent();
            return [2, true];
          case 2:
            _a.sent();
            return [2, false];
          case 3:
            return [2];
        }
      });
    });
  };
  Client2.prototype.getStats = function() {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "stats";
            return [4, this.httpRequest.get(url)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Client2.prototype.getVersion = function() {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "version";
            return [4, this.httpRequest.get(url)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Client2.prototype.createDump = function() {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "dumps";
            return [4, this.httpRequest.post(url)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Client2.prototype.getDumpStatus = function(dumpUid) {
    return __awaiter(this, void 0, void 0, function() {
      var url;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            url = "dumps/".concat(dumpUid, "/status");
            return [4, this.httpRequest.get(url)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Client2.prototype.generateTenantToken = function(_searchRules, _options) {
    var error = new Error();
    throw new Error("Meilisearch: failed to generate a tenant token. Generation of a token only works in a node environment \n ".concat(error.stack, "."));
  };
  return Client2;
}();
function encode64(data) {
  return Buffer.from(JSON.stringify(data)).toString("base64");
}
function sign(apiKey, encodedHeader, encodedPayload) {
  return crypto_default.createHmac("sha256", apiKey).update("".concat(encodedHeader, ".").concat(encodedPayload)).digest("base64").replace(/\+/g, "-").replace(/\//g, "_").replace(/=/g, "");
}
function createHeader() {
  var header = {
    alg: "HS256",
    typ: "JWT"
  };
  return encode64(header).replace(/=/g, "");
}
function validatePayload(payloadParams) {
  var searchRules = payloadParams.searchRules, apiKey = payloadParams.apiKey, expiresAt = payloadParams.expiresAt;
  var error = new Error();
  if (expiresAt) {
    if (!(expiresAt instanceof Date) || expiresAt.getTime() < Date.now()) {
      throw new Error("Meilisearch: When the expiresAt field in the token generation has a value, it must be a date set in the future and not in the past. \n ".concat(error.stack, "."));
    }
  }
  if (searchRules) {
    if (!(typeof searchRules === "object" || Array.isArray(searchRules))) {
      throw new Error("Meilisearch: The search rules added in the token generation must be of type array or object. \n ".concat(error.stack, "."));
    }
  }
  if (!apiKey || typeof apiKey !== "string") {
    throw new Error("Meilisearch: The API key used for the token generation must exist and be of type string. \n ".concat(error.stack, "."));
  }
}
function createPayload(payloadParams) {
  var searchRules = payloadParams.searchRules, apiKey = payloadParams.apiKey, expiresAt = payloadParams.expiresAt;
  validatePayload(payloadParams);
  var payload = {
    searchRules,
    apiKeyPrefix: apiKey.substring(0, 8),
    exp: expiresAt === null || expiresAt === void 0 ? void 0 : expiresAt.getTime()
  };
  return encode64(payload).replace(/=/g, "");
}
var Token = function() {
  function Token2(config) {
    this.config = config;
  }
  Token2.prototype.generateTenantToken = function(searchRules, options) {
    var apiKey = (options === null || options === void 0 ? void 0 : options.apiKey) || this.config.apiKey || "";
    var expiresAt = options === null || options === void 0 ? void 0 : options.expiresAt;
    var encodedHeader = createHeader();
    var encodedPayload = createPayload({ searchRules, apiKey, expiresAt });
    var signature = sign(apiKey, encodedHeader, encodedPayload);
    return "".concat(encodedHeader, ".").concat(encodedPayload, ".").concat(signature);
  };
  return Token2;
}();
var MeiliSearch = function(_super) {
  __extends(MeiliSearch2, _super);
  function MeiliSearch2(config) {
    var _this = _super.call(this, config) || this;
    _this.tokens = new Token(config);
    return _this;
  }
  MeiliSearch2.prototype.generateTenantToken = function(searchRules, options) {
    if (typeof window === "undefined") {
      return this.tokens.generateTenantToken(searchRules, options);
    }
    return _super.prototype.generateTenantToken.call(this, searchRules, options);
  };
  return MeiliSearch2;
}(Client);

// dep:meilisearch
var meilisearch_default = MeiliSearch;
export {
  Index,
  MeiliSearch,
  MeiliSearchApiError,
  MeiliSearchCommunicationError,
  MeiliSearchError,
  MeiliSearchTimeOutError,
  meilisearch_default as default,
  httpErrorHandler,
  httpResponseErrorHandler
};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
//# sourceMappingURL=meilisearch.js.map
